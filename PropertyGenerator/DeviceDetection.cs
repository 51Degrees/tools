using FiftyOne.DeviceDetection.Hash.Engine.OnPremise.FlowElements;
using FiftyOne.Pipeline.Core.Data.Types;
using FiftyOne.Pipeline.Engines.FiftyOne.Data;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace PropertyGenerationTool
{
    public class DeviceDetection
    {
        #region Internal Methods

        // Writes the copyright text + the auto-generation message
        internal static void WriteCopyright(StreamWriter writer)
        {
            string copyright = ReadCopyright();
            writer.Write(copyright);
            WriteAutoGenerateMessage(writer);
        }

        // This text is not a part of the license text, however, it needs to be included in the
        // output file.
        internal static void WriteAutoGenerateMessage(StreamWriter writer)
        {
            writer.WriteLine("");
            writer.WriteLine("");
            writer.WriteLine("/* *********************************************************************");
            writer.WriteLine(" * This code is auto generated by 51Degrees using the most up to data");
            writer.WriteLine(" * at the time of release, and should not be changed directly.");
            writer.WriteLine(" * **********************************************************************/");
        }
        // Reads the text from the text file located in the project's folder
        // and returns a string 
        internal static string ReadCopyright()
        {
            try
            {
                using (var reader = new StreamReader("Copyright.txt")) 
                {
                    return reader.ReadToEnd();
                }
            }
            catch (IOException e)
            {
                Console.WriteLine("The file could not be read:");
                Console.WriteLine(e.Message);
                return null;
            }

        }

        internal static void BuildCSharp(DeviceDetectionHashEngine engine, string basePath)
        {
            Console.WriteLine(String.Format(
                "Building IDeviceData in '{0}'.",
                new DirectoryInfo(basePath).FullName));
            Directory.CreateDirectory(basePath);
            CSClassBuilder.Shared.BuildInterface(
                engine,
                basePath + "/IDeviceData.cs");
            Console.WriteLine(String.Format(
                "Building DeviceDataBase.cs in '{0}'.",
                new DirectoryInfo(basePath).FullName));
            CSClassBuilder.Shared.BuildClass(engine,
                basePath + "/DeviceDataBase.cs");
        }

        internal static void BuildJava(DeviceDetectionHashEngine engine, string basePath)
        {
            Console.WriteLine(String.Format(
                "Building DeviceData.java for in '{0}'.",
                new DirectoryInfo(basePath).FullName));
            Directory.CreateDirectory(basePath);
            JavaClassBuilder.BuildInterface(engine,
                basePath + "/DeviceData.java");
            Console.WriteLine(String.Format(
                "Building DeviceDataBase.java for in '{0}'.",
                new DirectoryInfo(basePath).FullName));
            JavaClassBuilder.BuildClass(engine,
                basePath + "/DeviceDataBase.java");
        }

#endregion

    }
}
